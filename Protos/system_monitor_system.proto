// <copyright file="System_Monitor_Status.cs" company="McLaren Applied Ltd.">
// Copyright (c) McLaren Applied Ltd.</copyright>

syntax = "proto3";

option csharp_namespace = "SystemMonitorProtobuf";

package system_monitor_system;

import "google/protobuf/empty.proto";
import "Protos/system_monitor_common.proto";

service SystemMonitorSystem {
  rpc GetStatus (google.protobuf.Empty) returns (StatusReply);
  rpc SetOnline (OnlineRequest) returns (system_monitor_common.Return);
  rpc SetLiveUpdate (LiveUpdateRequest) returns (system_monitor_common.Return);
  rpc GetUnitList (google.protobuf.Empty) returns (UnitListReply);
  rpc GetUnitName (google.protobuf.Empty) returns (UnitNameReply);
  rpc GetUnitByIndex (UnitByIndexRequest) returns (UnitInfo);
  rpc SetUnitByIndex (UnitByIndexTypeRequest) returns (system_monitor_common.Return);
  rpc GetMultiApplicationBases (google.protobuf.Empty) returns (MultiApplicationBasesReply);
  rpc GetMultiApplicationBase (google.protobuf.Empty) returns (MultiApplicationBaseInfo);
  rpc SetMultiApplicationBase (MultiApplicationBasesRequest) returns (system_monitor_common.Return);
  rpc GetLicenceDetails (google.protobuf.Empty) returns (LicenceDetailsReply);
  rpc GetDeviceProperties (google.protobuf.Empty) returns (DevicePropertiesReply);
  rpc GetLiveLogging (google.protobuf.Empty) returns (LiveLoggingReply);
  rpc SetLiveLogging (LiveLoggingRequest) returns (system_monitor_common.Return);
  rpc SetBatchMode (BatchModeRequest) returns (system_monitor_common.Return);
  rpc SendMessage (SendMessageRequest) returns (SendMessageReply);
  rpc GetLogFolder (google.protobuf.Empty) returns (FolderReply);
  rpc GetPPOFileName (google.protobuf.Empty) returns (FolderReply);
  rpc CreatePGV (CreatePGVRequest) returns (CreatePGVReply);
  }

enum LinkStatus {
    Link_OK         = 0;
    Link_NOK        = 1;
    Controller_Busy = 2;
    In_Boot         = 3;
    Zone_1          = 4;
    Zone_2          = 5;
    Zone_3          = 6;
    Bad_Response    = 7;
    Invalid_Device  = 8;
    Unknown         = 0xFFFF; 
}

message OnlineRequest {
	bool state = 1;
}

message StatusReply {
    LinkStatus link_status = 1;
    bool online = 2;
    bool live_update = 3;
    system_monitor_common.ErrorCode return_code = 4;
}

message LiveUpdateRequest {
    bool state = 1;
    uint32 action = 2;
}

message UnitInfo {
    string name = 1;
    string type = 2;
    string ip_address = 3;
    system_monitor_common.ErrorCode return_code = 4;
}

message UnitListReply {
    repeated UnitInfo info = 1;
    system_monitor_common.ErrorCode return_code = 2;
}

message UnitNameReply {
    string name = 1;
    system_monitor_common.ErrorCode return_code = 2;
}

message UnitByIndexRequest {
	uint32 index = 1;
}

message UnitByIndexTypeRequest {
	uint32 index = 1;
    bool primary = 2;
}

message MultiApplicationBaseInfo {
    string name = 1;
    string path = 2;
    system_monitor_common.ErrorCode return_code = 3;
}

message MultiApplicationBasesReply {
    repeated MultiApplicationBaseInfo info = 1;
    system_monitor_common.ErrorCode return_code = 2;
}

message MultiApplicationBasesRequest {
    string base_name = 1;
}

message LicenceDetailsReply {
    string consortium = 1;
    string owner = 2;
    system_monitor_common.ErrorCode return_code = 3;
}

message DeviceProperties {
    string comms_path = 1;
    string device_name = 2;
    string ip_address = 3;
    int32 serial_number = 4;
}

message DevicePropertiesReply {
    repeated DeviceProperties devices = 1;
    system_monitor_common.ErrorCode return_code = 2;
}

message LiveLoggingReply {
    bool live_logging_state = 1;
    system_monitor_common.ErrorCode return_code = 2;
}

message LiveLoggingRequest {
	bool state = 1;
}

message BatchModeRequest {
	bool mode = 1;
}

message SendMessageRequest {
    uint32 app_id = 1;
    uint32 timeout = 2;
    uint32 retries = 3;
    repeated int32 messages = 4;
}

message SendMessageReply {
    repeated int32 messages = 1;
    system_monitor_common.ErrorCode return_code = 2;
}

message FolderReply {
    string file_path = 1;
    system_monitor_common.ErrorCode return_code = 2;
}

message CreatePGVRequest {
    string location = 1;
    string asap2_file_path = 2;
    string hex_file_path = 3;
    string controllers_file_path = 4;
    string errors_file_path = 5;
    string events_file_path = 6;
    string adjustment_file_path = 7;
    string sensors_file_path = 8;
    string injector_file_path = 9;
    string sensor_enable_file_path = 10;
    string live_auto_tune_file_path = 11;
    string comments = 12;
    string notes = 13;
}

message CreatePGVReply {
    string pgv_file_path = 1;
    string dtv_file_path = 2;
    system_monitor_common.ErrorCode return_code = 3;
}