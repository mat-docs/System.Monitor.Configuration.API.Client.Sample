// <copyright file="System_Monitor_Virtual.cs" company="McLaren Applied Ltd.">
// Copyright (c) McLaren Applied Ltd.</copyright>

syntax = "proto3";

option csharp_namespace = "SystemMonitorProtobuf";

package system_monitor_virtual;

import "google/protobuf/empty.proto";
import "Protos/system_monitor_common.proto";

service SystemMonitorVirtual {
    // Modify or Create a Virtual Parameter.
    rpc SetVirtualParameter (VirtualParameterRequest) returns (system_monitor_common.Return);
    // Gets the properties of the given virtual parameters
    rpc GetVirtualParameterProperties (system_monitor_common.ParametersRequest) returns (VirtualParameterPropertiesReply);
    // Removes virtual parameters.
    rpc RemoveVirtualParameters (VirtualsRequest) returns (VirtualReply);
    // Removes all virtual parameters.
    rpc RemoveAllVirtualParameters (google.protobuf.Empty) returns (system_monitor_common.Return);
    // Removes virtual parameter conversion rules.
    rpc RemoveVirtualConversions (VirtualsRequest) returns (VirtualReply);
    // Removes all virtual parameter conversion rules.
    rpc RemoveAllVirtualConvertions (google.protobuf.Empty) returns (system_monitor_common.Return);
    // Gets the virtual parameter groups.
    rpc GetVirtualParameterGroups (google.protobuf.Empty) returns (VirtualGroupsReply);
    // Gets a virtual parameter group.
    rpc GetVirtualParameterGroup (VirtualGroupRequest) returns (VirtualGroupReply);
    // Gets the virtual parameters within a group.
    rpc GetVirtualParametersInGroup (VirtualGroupRequest) returns (VirtualGroupsReply);
    // Exports virtual parameters.
    rpc VirtualParametersExport (VirtualExportRequest) returns (system_monitor_common.Return);
    // Imports virtual parameters.
    rpc VirtualParametersImport (system_monitor_common.FileRequest) returns (system_monitor_common.Return);
    // Adds a virtual parameter group.
    rpc AddVirtualParameterGroup (AddGroupRequest) returns (system_monitor_common.Return);
    // Removes a virtual parameter group.
    rpc RemoveVirtualParameterGroup (VirtualGroupRequest) returns (system_monitor_common.Return);
    // Removes all virtual parameters from a group.
    rpc RemoveAllVirtualParametersFromGroup (VirtualGroupRequest) returns (system_monitor_common.Return);
    // Sets the data type of a virtual parameter.
    rpc SetVirtualParameterDataType (VirtualParameterDataTypeRequest) returns (system_monitor_common.Return);
}

message VirtualParameterRequest {
    // The unique identifier of the virtual parameter.
    string id = 1;
    // The display name for the virtual parameter.
    string name = 2;
    // Description of the virtual parameter.
    string description = 3;
    // Minimum value for display range.
    double min_display = 4;
    // Maximum value for display range.
    double max_display = 5;
    // Minimum logging rate.
    int32  Min_logging_rate = 6;
    // Scaling factor. See EScalingUnit in Enumeration Definitions
    int32  scaling_factor = 7;
    // If set to true, the virtual parameter will be marked as a Prime Parameter.
    bool   is_min_not_def = 8;
    // The expression to evaluate in the virtual parameter.
    string expression = 9;
    // The conversion rule identifier for converting the output value to appropriate unit values.
    string conversion_id = 10;
    // Overwrites existing data
    bool overwrite = 11;
    // Sets the overriding units in which to display the virtual parameter’s value.
    string units = 12;
    // Sets the overriding format in which to display the virtual parameter’s value.
    string format_override = 13;
    // The path of the group in which to add the virtual parameter, e.g. \\TopLevelGroup\\SubGroup
    string group = 14;
    // The data type.
    system_monitor_common.DataType data_type = 15;
    // Lower warning limit value.
    double lower_warning = 16;
    // Upper warning limit value.
    double upper_warning = 17;
}

message VirtualParameterProperties {
    // Parameter identifier.
    string Id = 1;
    // Parameter display names.
    string name = 2;
    // Parameter description.
    string description = 3;
    // Lower display limit.
    double lower_display_limit = 4;
    // Upper display limit.
    double upper_display_limit = 5;
    // Minimum logging rate.
    uint32 min_logging_rate = 6;
    // Parameter scaling factor (see EScalingUnit).
    uint32 scaling_factor = 7;
    // State of min/max values.
    bool   min_not_defined = 8;
    // Expression used to evaluate the virtual parameter.
    string expression = 9;
    // Parameter units.
    string units = 10;
    // Parameter display format.
    string format = 11;
    // Parameter group name.
    string group = 12;
    // Unique identifier of the parameter conversion rule.
    string conversion_id = 13;
    // Parameter data type.
    system_monitor_common.DataType data_type = 14;
    // Return code.
    system_monitor_common.ErrorCode return_code = 15;
}

message VirtualParameterPropertiesReply {
    // The properties of the virtual parameters
    repeated VirtualParameterProperties parameters = 1;
    // Return code
    system_monitor_common.ErrorCode return_code = 2;
}

message VirtualsRequest {
    // Identifiers of the virtual parameters.
    repeated string ids = 1;
}

message VirtualParameter {
    // Identifier of the virtual parameter.
    string id = 1;
    // Return code
    system_monitor_common.ErrorCode return_code = 2;
}

message VirtualReply {
    // Identifiers of the virtual parameters.
    repeated VirtualParameter ids = 1;
    // Return code
    system_monitor_common.ErrorCode return_code = 2;
}

message VirtualGroupsReply {
    // Identifiers of the virtual parameters.
    repeated string ids = 1;
    // Return code
    system_monitor_common.ErrorCode return_code = 2;
}

message VirtualGroupRequest {
    // Identifier of the group.
    string group = 1;
}

message VirtualGroupReply {
    // Name of the virtual parameter group.
    string name = 1;
    // Description of the virtual parameter group.
    string description = 2;
    // Whether the virtual parameter group is Read Only
    bool read_only = 3;
    // Return code
    system_monitor_common.ErrorCode return_code = 4;
}

message VirtualExportRequest {
    // Fiile path to export parameters into.
    string file_path = 1;
    // Group name to export. NULL for all virtual parameters.
    string group = 2;
}

message AddGroupRequest {
    // The path where the groups is to be added, e.g. \\TopLevelGroup\\SubGroup
    string group_path = 1;
    // The display name for the virtual parameter group.
    string name = 2;
    // Description of the virtual parameter group.
    string description = 3;
    // If set to true, the virtual parameter group will be marked as a Read Only.
    bool read_only = 4;
}

message VirtualParameterDataTypeRequest {
    // The unique identification of the virtual parameter.
    string Id = 1;
    // The data type.
    system_monitor_common.DataType data_type = 2;
}